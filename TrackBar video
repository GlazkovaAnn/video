#include <opencv2/opencv.hpp>

#ifdef _MSC_VER
# if CV_MAJOR_VERSION == 2 && CV_MINOR_VERSION == 4 && CV_SUBMINOR_VERSION == 3
// OpenCV 2.4.3
# if defined(_DEBUG)
# pragma comment(lib, "opencv_core243d.lib")
# pragma comment(lib, "opencv_highgui243d.lib")
# pragma comment(lib, "opencv_imgproc243d.lib")
# pragma comment(lib, "opencv_video243d.lib")
# pragma comment(lib, "opencv_ml243d.lib")

# pragma comment(lib, "opencv_calib3d243d.lib")
# pragma comment(lib, "opencv_objdetect243d.lib")
# pragma comment(lib, "opencv_features2d243d.lib")
# pragma comment(lib, "opencv_contrib243d.lib")
# pragma comment(lib, "opencv_ts243d.lib")
# pragma comment(lib, "opencv_legacy243d.lib")
# pragma comment(lib, "opencv_flann243d.lib")
# pragma comment(lib, "opencv_gpu243d.lib")
# else
# pragma comment(lib, "opencv_core243.lib")
# pragma comment(lib, "opencv_highgui243.lib")
# pragma comment(lib, "opencv_imgproc243.lib")
# pragma comment(lib, "opencv_video243.lib")
# pragma comment(lib, "opencv_ml243.lib")

# pragma comment(lib, "opencv_calib3d243.lib")
# pragma comment(lib, "opencv_objdetect243.lib")
# pragma comment(lib, "opencv_features2d243.lib")
# pragma comment(lib, "opencv_contrib243.lib")
# pragma comment(lib, "opencv_ts243.lib")
# pragma comment(lib, "opencv_legacy243.lib")
# pragma comment(lib, "opencv_flann243.lib")
# pragma comment(lib, "opencv_gpu243.lib")
# endif //# if defined(_DEBUG)

# endif //# if CV_MAJOR_VERSION == 2 && CV_MINOR_VERSION == 3
#endif //#ifdef _MSC_VER
/*int main()
{
        cv::Mat img = cv::imread("Image0.jpg");
        cv::imshow("img", img);
        cv::waitKey(0);
        return 0;
}*/
//
// пример базовых морфологических преобразований
// cvErode() и cvDilate()
//

#include <cv.h>
#include <highgui.h>
#include <stdlib.h>
#include <stdio.h>

IplImage* image = 0;
IplImage* dst = 0;
IplImage* frame =0;

IplImage* erode = 0;
IplImage* dilate = 0;

int radius = 1;
int radius_max=10;

//
// функция-обработчик ползунка -
// радиус ядра
void myTrackbarRadius(int pos) {
        radius = pos;
}

int iterations = 1;
int iterations_max = 10;

//
// функция-обработчик ползунка -
// число итераций
void myTrackbarIterations(int pos) {
        iterations = pos;
}

int main(int argc, char* argv[])
{
        char* filename =  "test1.avi";

        printf("[i] file: %s\n", filename);
        // получаем картинку
  	cvNamedWindow("original",CV_WINDOW_AUTOSIZE);
        cvNamedWindow("erode",CV_WINDOW_AUTOSIZE);
        cvNamedWindow("dilate",CV_WINDOW_AUTOSIZE);

        cvCreateTrackbar("Radius", "original", &radius, radius_max, myTrackbarRadius);
        cvCreateTrackbar("Iterations", "original", &iterations, iterations_max, myTrackbarIterations);

		CvCapture* capture = cvCreateFileCapture( filename );
		
              

        while(1){  // получаем следующий кадр
			if(!cvGrabFrame(capture))
				break;
                image = cvRetrieveFrame( capture ); 
				
                if( !image ) {
                        break;
                }
        //image = cvLoadImage(filename,1);
        // клонируем картинку
        dst = cvCloneImage(image);
        erode = cvCloneImage(image);
        dilate = cvCloneImage(image);

        printf("[i] image: %s\n", filename);
        assert( image != 0 );

        // окно для отображения картинки
        

                // показываем картинку
                cvShowImage("original",image);

                // создаём ядро
                IplConvKernel* Kern = cvCreateStructuringElementEx(radius*2+1, radius*2+1, radius, radius, CV_SHAPE_ELLIPSE);

                // выполняем преобразования
                cvErode(image, erode, Kern, iterations);
                cvDilate(image, dilate, Kern, iterations);

                // показываем результат
                cvShowImage("erode",erode);
                cvShowImage("dilate",dilate);
                
                cvReleaseStructuringElement(&Kern);

                char c = cvWaitKey(33);
                if (c == 27) { // если нажата ESC - выходим
                        break;
                }
		}
		cvReleaseCapture( &capture );
		
        // освобождаем ресурсы
        cvReleaseImage(&image);
        cvReleaseImage(&dst);
        cvReleaseImage(&erode);
        cvReleaseImage(&dilate);
        // удаляем окно
        cvDestroyWindow("original");
        cvDestroyWindow("erode");
        cvDestroyWindow("dilate");
        return 0;
}
